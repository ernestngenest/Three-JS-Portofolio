/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: mark001561 (https://sketchfab.com/mark001561)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/holoen-ninomae-inanis-61c2ea7cd95a4d06b09653b7a50fd98f
Title: HoloEN_Ninomae Ina'nis_休閒服
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import gsap from 'gsap'
import { Group } from 'three'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Object_166: THREE.SkinnedMesh
    Object_168: THREE.SkinnedMesh
    Object_170: THREE.SkinnedMesh
    Object_172: THREE.SkinnedMesh
    Object_174: THREE.SkinnedMesh
    Object_175: THREE.SkinnedMesh
    Object_176: THREE.SkinnedMesh
    Object_178: THREE.SkinnedMesh
    Object_179: THREE.SkinnedMesh
    Object_180: THREE.SkinnedMesh
    Object_181: THREE.SkinnedMesh
    Object_183: THREE.SkinnedMesh
    Object_185: THREE.SkinnedMesh
    Object_187: THREE.SkinnedMesh
    Object_188: THREE.SkinnedMesh
    INA_earphone001_INA_earphone01_0: THREE.Mesh
    _rootJoint: THREE.Bone
  }
  materials: {
    ['C01.001']: THREE.MeshBasicMaterial
    ['hair01.001']: THREE.MeshBasicMaterial
    ['body_01.001']: THREE.MeshBasicMaterial
    ['EYE_01.001']: THREE.MeshBasicMaterial
    EBW_01: THREE.MeshBasicMaterial
    ['hair02.001']: THREE.MeshBasicMaterial
    hair_front: THREE.MeshBasicMaterial
    hair_DK: THREE.MeshBasicMaterial
    ['M_sticker01.001']: THREE.MeshBasicMaterial
    INA_earphone01: THREE.MeshBasicMaterial
  }
}

export function Hololive(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/hololive.glb') as GLTFResult
  const groupRef = useRef<Group>(null)
  const [hovered, setHovered] = useState(false)

  const initialPosition = props.position || [11, -14.5, 2]
  const initialRotation = props.rotation || [0, -1.2, 0]
  const initialScale = props.scale || 6.5

  useEffect(() => {
    if (!groupRef.current) return

    gsap.to(groupRef.current.position, {
      y: Array.isArray(initialPosition) 
        ? initialPosition[1] + 0.3  // Float up by 0.3 units from initial position
        : 0.3,
      duration: 1.5,
      yoyo: true,
      repeat: -1,
      ease: "power1.inOut"
    })

    gsap.to(groupRef.current.rotation, {
      y: Array.isArray(initialRotation) 
        ? initialRotation[1] + 0.1  // Slight rotation
        : 0.1,
      duration: 2,
      yoyo: true,
      repeat: -1,
      ease: "power1.inOut"
    })

    return () => {
      if (groupRef.current) {
        gsap.killTweensOf(groupRef.current.position)
        gsap.killTweensOf(groupRef.current.rotation)
      }
    }
  }, [initialPosition, initialRotation])

  useFrame(() => {
    if (!groupRef.current) return

    if (hovered) {
      gsap.to(groupRef.current.position, {
        x: Array.isArray(initialPosition) ? initialPosition[0] : 0,
        y: (Array.isArray(initialPosition) ? initialPosition[1] : 0) + 1,
        z: Array.isArray(initialPosition) ? initialPosition[2] : 0,
        duration: 0.4,
        ease: "power2.out"
      })

      gsap.to(groupRef.current.rotation, {
        x: Array.isArray(initialRotation) ? initialRotation[0] : 0,
        y: (Array.isArray(initialRotation) ? initialRotation[1] : 0) + 0.2,
        z: Array.isArray(initialRotation) ? initialRotation[2] : 0,
        duration: 0.4,
        ease: "power2.out"
      })

      gsap.to(groupRef.current.scale, {
        x: (typeof initialScale === 'number' ? initialScale : 6.5) * 1.1,
        y: (typeof initialScale === 'number' ? initialScale : 6.5) * 1.1,
        z: (typeof initialScale === 'number' ? initialScale : 6.5) * 1.1,
        duration: 0.4,
        ease: "power2.out"
      })
    } else {
      gsap.to(groupRef.current.position, {
        x: Array.isArray(initialPosition) ? initialPosition[0] : 0,
        z: Array.isArray(initialPosition) ? initialPosition[2] : 0,
        duration: 0.4,
        ease: "power2.out"
      })

      gsap.to(groupRef.current.rotation, {
        x: Array.isArray(initialRotation) ? initialRotation[0] : 0,
        y: Array.isArray(initialRotation) ? initialRotation[1] : 0,
        z: Array.isArray(initialRotation) ? initialRotation[2] : 0,
        duration: 0.4,
        ease: "power2.out"
      })

      gsap.to(groupRef.current.scale, {
        x: typeof initialScale === 'number' ? initialScale : 6.5,
        y: typeof initialScale === 'number' ? initialScale : 6.5,
        z: typeof initialScale === 'number' ? initialScale : 6.5,
        duration: 0.4,
        ease: "power2.out"
      })
    }
  })

  return (
    <group 
      {...props} 
      dispose={null} 
      ref={groupRef}
      onPointerEnter={() => setHovered(true)}
      onPointerLeave={() => setHovered(false)}
    >
      <group scale={0.01}>
        <group rotation={[-Math.PI / 2, 0, 0]} scale={10}>
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            geometry={nodes.Object_166.geometry}
            material={materials['C01.001']}
            skeleton={nodes.Object_166.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_168.geometry}
            material={materials['C01.001']}
            skeleton={nodes.Object_168.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_170.geometry}
            material={materials['hair01.001']}
            skeleton={nodes.Object_170.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_172.geometry}
            material={materials['body_01.001']}
            skeleton={nodes.Object_172.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_174.geometry}
            material={materials['body_01.001']}
            skeleton={nodes.Object_174.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_175.geometry}
            material={materials['EYE_01.001']}
            skeleton={nodes.Object_175.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_176.geometry}
            material={materials.EBW_01}
            skeleton={nodes.Object_176.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_178.geometry}
            material={materials['hair01.001']}
            skeleton={nodes.Object_178.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_179.geometry}
            material={materials['hair02.001']}
            skeleton={nodes.Object_179.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_180.geometry}
            material={materials.hair_front}
            skeleton={nodes.Object_180.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_181.geometry}
            material={materials.hair_DK}
            skeleton={nodes.Object_181.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_183.geometry}
            material={materials['C01.001']}
            skeleton={nodes.Object_183.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_185.geometry}
            material={materials['C01.001']}
            skeleton={nodes.Object_185.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_187.geometry}
            material={materials['C01.001']}
            skeleton={nodes.Object_187.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_188.geometry}
            material={materials['M_sticker01.001']}
            skeleton={nodes.Object_188.skeleton}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.INA_earphone001_INA_earphone01_0.geometry}
          material={materials.INA_earphone01}
          position={[2.676, 211.361, -22.949]}
          rotation={[0.161, 0.427, 0.075]}
          scale={11.579}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/models/hololive.glb')
